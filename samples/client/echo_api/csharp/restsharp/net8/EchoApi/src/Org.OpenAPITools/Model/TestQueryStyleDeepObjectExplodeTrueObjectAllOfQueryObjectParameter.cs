/*
 * Echo Server API
 *
 * Echo Server API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: team@openapitools.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter
    /// </summary>
    [DataContract(Name = "test_query_style_deepObject_explode_true_object_allOf_query_object_parameter")]
    public partial class TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter : IEquatable<TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter" /> class.
        /// </summary>
        /// <param name="size">size.</param>
        /// <param name="color">color.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        public TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter(Option<string> size = default, Option<string> color = default, Option<long> id = default, Option<string> name = default)
        {
            // to ensure "size" (not nullable) is not null
            if (size.IsSet && size.Value == null)
            {
                throw new ArgumentNullException("size isn't a nullable property for TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter and cannot be null");
            }
            // to ensure "color" (not nullable) is not null
            if (color.IsSet && color.Value == null)
            {
                throw new ArgumentNullException("color isn't a nullable property for TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter and cannot be null");
            }
            // to ensure "name" (not nullable) is not null
            if (name.IsSet && name.Value == null)
            {
                throw new ArgumentNullException("name isn't a nullable property for TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter and cannot be null");
            }
            this.Size = size;
            this.Color = color;
            this.Id = id;
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public Option<string> Size { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public Option<string> Color { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /*
        <example>1</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Option<long> Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /*
        <example>Dogs</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public Option<string> Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter);
        }

        /// <summary>
        /// Returns true if TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Size == input.Size ||
                    
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.Color == input.Color ||
                    
                    this.Color.Equals(input.Color)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    
                    this.Name.Equals(input.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Size.IsSet && this.Size.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Size.Value.GetHashCode();
                }
                if (this.Color.IsSet && this.Color.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Color.Value.GetHashCode();
                }
                if (this.Id.IsSet)
                {
                hashCode = (hashCode * 59) + this.Id.Value.GetHashCode();
                }
                if (this.Name.IsSet && this.Name.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Name.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
