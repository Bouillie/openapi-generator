/*
 * Echo Server API
 *
 * Echo Server API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: team@openapitools.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// to test the default value of properties
    /// </summary>
    [DataContract(Name = "DefaultValue")]
    public partial class DefaultValue : IEquatable<DefaultValue>, IValidatableObject
    {
        /// <summary>
        /// Defines ArrayStringEnumDefault
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ArrayStringEnumDefaultEnum
        {
            /// <summary>
            /// Enum Success for value: success
            /// </summary>
            [EnumMember(Value = "success")]
            Success = 1,

            /// <summary>
            /// Enum Failure for value: failure
            /// </summary>
            [EnumMember(Value = "failure")]
            Failure = 2,

            /// <summary>
            /// Enum Unclassified for value: unclassified
            /// </summary>
            [EnumMember(Value = "unclassified")]
            Unclassified = 3
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultValue" /> class.
        /// </summary>
        /// <param name="arrayStringEnumRefDefault">arrayStringEnumRefDefault.</param>
        /// <param name="arrayStringEnumDefault">arrayStringEnumDefault.</param>
        /// <param name="arrayStringDefault">arrayStringDefault.</param>
        /// <param name="arrayIntegerDefault">arrayIntegerDefault.</param>
        /// <param name="arrayString">arrayString.</param>
        /// <param name="arrayStringNullable">arrayStringNullable.</param>
        /// <param name="arrayStringExtensionNullable">arrayStringExtensionNullable.</param>
        /// <param name="stringNullable">stringNullable.</param>
        public DefaultValue(Option<List<StringEnumRef>> arrayStringEnumRefDefault = default, Option<List<ArrayStringEnumDefaultEnum>> arrayStringEnumDefault = default, Option<List<string>> arrayStringDefault = default, Option<List<int>> arrayIntegerDefault = default, Option<List<string>> arrayString = default, Option<List<string>> arrayStringNullable = default, Option<List<string>> arrayStringExtensionNullable = default, Option<string> stringNullable = default)
        {
            // to ensure "arrayStringEnumRefDefault" (not nullable) is not null
            if (arrayStringEnumRefDefault.IsSet && arrayStringEnumRefDefault.Value == null)
            {
                throw new ArgumentNullException("arrayStringEnumRefDefault isn't a nullable property for DefaultValue and cannot be null");
            }
            // to ensure "arrayStringEnumDefault" (not nullable) is not null
            if (arrayStringEnumDefault.IsSet && arrayStringEnumDefault.Value == null)
            {
                throw new ArgumentNullException("arrayStringEnumDefault isn't a nullable property for DefaultValue and cannot be null");
            }
            // to ensure "arrayStringDefault" (not nullable) is not null
            if (arrayStringDefault.IsSet && arrayStringDefault.Value == null)
            {
                throw new ArgumentNullException("arrayStringDefault isn't a nullable property for DefaultValue and cannot be null");
            }
            // to ensure "arrayIntegerDefault" (not nullable) is not null
            if (arrayIntegerDefault.IsSet && arrayIntegerDefault.Value == null)
            {
                throw new ArgumentNullException("arrayIntegerDefault isn't a nullable property for DefaultValue and cannot be null");
            }
            // to ensure "arrayString" (not nullable) is not null
            if (arrayString.IsSet && arrayString.Value == null)
            {
                throw new ArgumentNullException("arrayString isn't a nullable property for DefaultValue and cannot be null");
            }
            this.ArrayStringEnumRefDefault = arrayStringEnumRefDefault;
            this.ArrayStringEnumDefault = arrayStringEnumDefault;
            this.ArrayStringDefault = arrayStringDefault;
            this.ArrayIntegerDefault = arrayIntegerDefault;
            this.ArrayString = arrayString;
            this.ArrayStringNullable = arrayStringNullable;
            this.ArrayStringExtensionNullable = arrayStringExtensionNullable;
            this.StringNullable = stringNullable;
        }

        /// <summary>
        /// Gets or Sets ArrayStringEnumRefDefault
        /// </summary>
        [DataMember(Name = "array_string_enum_ref_default", EmitDefaultValue = false)]
        public Option<List<StringEnumRef>> ArrayStringEnumRefDefault { get; set; }

        /// <summary>
        /// Gets or Sets ArrayStringEnumDefault
        /// </summary>
        [DataMember(Name = "array_string_enum_default", EmitDefaultValue = false)]
        public Option<List<DefaultValue.ArrayStringEnumDefaultEnum>> ArrayStringEnumDefault { get; set; }

        /// <summary>
        /// Gets or Sets ArrayStringDefault
        /// </summary>
        [DataMember(Name = "array_string_default", EmitDefaultValue = false)]
        public Option<List<string>> ArrayStringDefault { get; set; }

        /// <summary>
        /// Gets or Sets ArrayIntegerDefault
        /// </summary>
        [DataMember(Name = "array_integer_default", EmitDefaultValue = false)]
        public Option<List<int>> ArrayIntegerDefault { get; set; }

        /// <summary>
        /// Gets or Sets ArrayString
        /// </summary>
        [DataMember(Name = "array_string", EmitDefaultValue = false)]
        public Option<List<string>> ArrayString { get; set; }

        /// <summary>
        /// Gets or Sets ArrayStringNullable
        /// </summary>
        [DataMember(Name = "array_string_nullable", EmitDefaultValue = true)]
        public Option<List<string>?> ArrayStringNullable { get; set; }

        /// <summary>
        /// Gets or Sets ArrayStringExtensionNullable
        /// </summary>
        [DataMember(Name = "array_string_extension_nullable", EmitDefaultValue = true)]
        public Option<List<string>?> ArrayStringExtensionNullable { get; set; }

        /// <summary>
        /// Gets or Sets StringNullable
        /// </summary>
        [DataMember(Name = "string_nullable", EmitDefaultValue = true)]
        public Option<string?> StringNullable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DefaultValue {\n");
            sb.Append("  ArrayStringEnumRefDefault: ").Append(ArrayStringEnumRefDefault).Append("\n");
            sb.Append("  ArrayStringEnumDefault: ").Append(ArrayStringEnumDefault).Append("\n");
            sb.Append("  ArrayStringDefault: ").Append(ArrayStringDefault).Append("\n");
            sb.Append("  ArrayIntegerDefault: ").Append(ArrayIntegerDefault).Append("\n");
            sb.Append("  ArrayString: ").Append(ArrayString).Append("\n");
            sb.Append("  ArrayStringNullable: ").Append(ArrayStringNullable).Append("\n");
            sb.Append("  ArrayStringExtensionNullable: ").Append(ArrayStringExtensionNullable).Append("\n");
            sb.Append("  StringNullable: ").Append(StringNullable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DefaultValue);
        }

        /// <summary>
        /// Returns true if DefaultValue instances are equal
        /// </summary>
        /// <param name="input">Instance of DefaultValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefaultValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ArrayStringEnumRefDefault == input.ArrayStringEnumRefDefault ||
                    this.ArrayStringEnumRefDefault.IsSet && this.ArrayStringEnumRefDefault.Value != null &&
                    input.ArrayStringEnumRefDefault.IsSet && input.ArrayStringEnumRefDefault.Value != null &&
                    this.ArrayStringEnumRefDefault.Value.SequenceEqual(input.ArrayStringEnumRefDefault.Value)
                ) && 
                (
                    this.ArrayStringEnumDefault == input.ArrayStringEnumDefault ||
                    this.ArrayStringEnumDefault.IsSet && this.ArrayStringEnumDefault.Value != null &&
                    input.ArrayStringEnumDefault.IsSet && input.ArrayStringEnumDefault.Value != null &&
                    this.ArrayStringEnumDefault.Value.SequenceEqual(input.ArrayStringEnumDefault.Value)
                ) && 
                (
                    this.ArrayStringDefault == input.ArrayStringDefault ||
                    this.ArrayStringDefault.IsSet && this.ArrayStringDefault.Value != null &&
                    input.ArrayStringDefault.IsSet && input.ArrayStringDefault.Value != null &&
                    this.ArrayStringDefault.Value.SequenceEqual(input.ArrayStringDefault.Value)
                ) && 
                (
                    this.ArrayIntegerDefault == input.ArrayIntegerDefault ||
                    this.ArrayIntegerDefault.IsSet && this.ArrayIntegerDefault.Value != null &&
                    input.ArrayIntegerDefault.IsSet && input.ArrayIntegerDefault.Value != null &&
                    this.ArrayIntegerDefault.Value.SequenceEqual(input.ArrayIntegerDefault.Value)
                ) && 
                (
                    this.ArrayString == input.ArrayString ||
                    this.ArrayString.IsSet && this.ArrayString.Value != null &&
                    input.ArrayString.IsSet && input.ArrayString.Value != null &&
                    this.ArrayString.Value.SequenceEqual(input.ArrayString.Value)
                ) && 
                (
                    this.ArrayStringNullable == input.ArrayStringNullable ||
                    this.ArrayStringNullable.IsSet && this.ArrayStringNullable.Value != null &&
                    input.ArrayStringNullable.IsSet && input.ArrayStringNullable.Value != null &&
                    this.ArrayStringNullable.Value.SequenceEqual(input.ArrayStringNullable.Value)
                ) && 
                (
                    this.ArrayStringExtensionNullable == input.ArrayStringExtensionNullable ||
                    this.ArrayStringExtensionNullable.IsSet && this.ArrayStringExtensionNullable.Value != null &&
                    input.ArrayStringExtensionNullable.IsSet && input.ArrayStringExtensionNullable.Value != null &&
                    this.ArrayStringExtensionNullable.Value.SequenceEqual(input.ArrayStringExtensionNullable.Value)
                ) && 
                (
                    this.StringNullable == input.StringNullable ||
                    
                    this.StringNullable.Equals(input.StringNullable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArrayStringEnumRefDefault.IsSet && this.ArrayStringEnumRefDefault.Value != null)
                {
                    hashCode = (hashCode * 59) + this.ArrayStringEnumRefDefault.Value.GetHashCode();
                }
                if (this.ArrayStringEnumDefault.IsSet && this.ArrayStringEnumDefault.Value != null)
                {
                    hashCode = (hashCode * 59) + this.ArrayStringEnumDefault.Value.GetHashCode();
                }
                if (this.ArrayStringDefault.IsSet && this.ArrayStringDefault.Value != null)
                {
                    hashCode = (hashCode * 59) + this.ArrayStringDefault.Value.GetHashCode();
                }
                if (this.ArrayIntegerDefault.IsSet && this.ArrayIntegerDefault.Value != null)
                {
                    hashCode = (hashCode * 59) + this.ArrayIntegerDefault.Value.GetHashCode();
                }
                if (this.ArrayString.IsSet && this.ArrayString.Value != null)
                {
                    hashCode = (hashCode * 59) + this.ArrayString.Value.GetHashCode();
                }
                if (this.ArrayStringNullable.IsSet && this.ArrayStringNullable.Value != null)
                {
                    hashCode = (hashCode * 59) + this.ArrayStringNullable.Value.GetHashCode();
                }
                if (this.ArrayStringExtensionNullable.IsSet && this.ArrayStringExtensionNullable.Value != null)
                {
                    hashCode = (hashCode * 59) + this.ArrayStringExtensionNullable.Value.GetHashCode();
                }
                if (this.StringNullable.IsSet && this.StringNullable.Value != null)
                {
                    hashCode = (hashCode * 59) + this.StringNullable.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
