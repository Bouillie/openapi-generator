/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract(Name = "User")]
    public partial class User : IEquatable<User>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="username">username.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="email">email.</param>
        /// <param name="password">password.</param>
        /// <param name="phone">phone.</param>
        /// <param name="userStatus">User Status.</param>
        /// <param name="objectWithNoDeclaredProps">test code generation for objects Value must be a map of strings to values. It cannot be the &#39;null&#39; value..</param>
        /// <param name="objectWithNoDeclaredPropsNullable">test code generation for nullable objects. Value must be a map of strings to values or the &#39;null&#39; value..</param>
        /// <param name="anyTypeProp">test code generation for any type Here the &#39;type&#39; attribute is not specified, which means the value can be anything, including the null value, string, number, boolean, array or object. See https://github.com/OAI/OpenAPI-Specification/issues/1389.</param>
        /// <param name="anyTypePropNullable">test code generation for any type Here the &#39;type&#39; attribute is not specified, which means the value can be anything, including the null value, string, number, boolean, array or object. The &#39;nullable&#39; attribute does not change the allowed values..</param>
        public User(Option<long> id = default, Option<string> username = default, Option<string> firstName = default, Option<string> lastName = default, Option<string> email = default, Option<string> password = default, Option<string> phone = default, Option<int> userStatus = default, Option<Object> objectWithNoDeclaredProps = default, Option<Object> objectWithNoDeclaredPropsNullable = default, Option<Object> anyTypeProp = default, Option<Object> anyTypePropNullable = default)
        {
            // to ensure "username" (not nullable) is not null
            if (username.IsSet && username.Value == null)
            {
                throw new ArgumentNullException("username isn't a nullable property for User and cannot be null");
            }
            // to ensure "firstName" (not nullable) is not null
            if (firstName.IsSet && firstName.Value == null)
            {
                throw new ArgumentNullException("firstName isn't a nullable property for User and cannot be null");
            }
            // to ensure "lastName" (not nullable) is not null
            if (lastName.IsSet && lastName.Value == null)
            {
                throw new ArgumentNullException("lastName isn't a nullable property for User and cannot be null");
            }
            // to ensure "email" (not nullable) is not null
            if (email.IsSet && email.Value == null)
            {
                throw new ArgumentNullException("email isn't a nullable property for User and cannot be null");
            }
            // to ensure "password" (not nullable) is not null
            if (password.IsSet && password.Value == null)
            {
                throw new ArgumentNullException("password isn't a nullable property for User and cannot be null");
            }
            // to ensure "phone" (not nullable) is not null
            if (phone.IsSet && phone.Value == null)
            {
                throw new ArgumentNullException("phone isn't a nullable property for User and cannot be null");
            }
            // to ensure "objectWithNoDeclaredProps" (not nullable) is not null
            if (objectWithNoDeclaredProps.IsSet && objectWithNoDeclaredProps.Value == null)
            {
                throw new ArgumentNullException("objectWithNoDeclaredProps isn't a nullable property for User and cannot be null");
            }
            this._Id = id;
            if (this.Id.IsSet)
            {
                this._flagId = true;
            }
            this._Username = username;
            if (this.Username.IsSet)
            {
                this._flagUsername = true;
            }
            this._FirstName = firstName;
            if (this.FirstName.IsSet)
            {
                this._flagFirstName = true;
            }
            this._LastName = lastName;
            if (this.LastName.IsSet)
            {
                this._flagLastName = true;
            }
            this._Email = email;
            if (this.Email.IsSet)
            {
                this._flagEmail = true;
            }
            this._Password = password;
            if (this.Password.IsSet)
            {
                this._flagPassword = true;
            }
            this._Phone = phone;
            if (this.Phone.IsSet)
            {
                this._flagPhone = true;
            }
            this._UserStatus = userStatus;
            if (this.UserStatus.IsSet)
            {
                this._flagUserStatus = true;
            }
            this._ObjectWithNoDeclaredProps = objectWithNoDeclaredProps;
            if (this.ObjectWithNoDeclaredProps.IsSet)
            {
                this._flagObjectWithNoDeclaredProps = true;
            }
            this._ObjectWithNoDeclaredPropsNullable = objectWithNoDeclaredPropsNullable;
            if (this.ObjectWithNoDeclaredPropsNullable.IsSet)
            {
                this._flagObjectWithNoDeclaredPropsNullable = true;
            }
            this._AnyTypeProp = anyTypeProp;
            if (this.AnyTypeProp.IsSet)
            {
                this._flagAnyTypeProp = true;
            }
            this._AnyTypePropNullable = anyTypePropNullable;
            if (this.AnyTypePropNullable.IsSet)
            {
                this._flagAnyTypePropNullable = true;
            }
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Option<long> Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private Option<long> _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public Option<string> Username
        {
            get{ return _Username;}
            set
            {
                _Username = value;
                _flagUsername = true;
            }
        }
        private Option<string> _Username;
        private bool _flagUsername;

        /// <summary>
        /// Returns false as Username should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUsername()
        {
            return _flagUsername;
        }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public Option<string> FirstName
        {
            get{ return _FirstName;}
            set
            {
                _FirstName = value;
                _flagFirstName = true;
            }
        }
        private Option<string> _FirstName;
        private bool _flagFirstName;

        /// <summary>
        /// Returns false as FirstName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstName()
        {
            return _flagFirstName;
        }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public Option<string> LastName
        {
            get{ return _LastName;}
            set
            {
                _LastName = value;
                _flagLastName = true;
            }
        }
        private Option<string> _LastName;
        private bool _flagLastName;

        /// <summary>
        /// Returns false as LastName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastName()
        {
            return _flagLastName;
        }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public Option<string> Email
        {
            get{ return _Email;}
            set
            {
                _Email = value;
                _flagEmail = true;
            }
        }
        private Option<string> _Email;
        private bool _flagEmail;

        /// <summary>
        /// Returns false as Email should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmail()
        {
            return _flagEmail;
        }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public Option<string> Password
        {
            get{ return _Password;}
            set
            {
                _Password = value;
                _flagPassword = true;
            }
        }
        private Option<string> _Password;
        private bool _flagPassword;

        /// <summary>
        /// Returns false as Password should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePassword()
        {
            return _flagPassword;
        }
        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public Option<string> Phone
        {
            get{ return _Phone;}
            set
            {
                _Phone = value;
                _flagPhone = true;
            }
        }
        private Option<string> _Phone;
        private bool _flagPhone;

        /// <summary>
        /// Returns false as Phone should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePhone()
        {
            return _flagPhone;
        }
        /// <summary>
        /// User Status
        /// </summary>
        /// <value>User Status</value>
        [DataMember(Name = "userStatus", EmitDefaultValue = false)]
        public Option<int> UserStatus
        {
            get{ return _UserStatus;}
            set
            {
                _UserStatus = value;
                _flagUserStatus = true;
            }
        }
        private Option<int> _UserStatus;
        private bool _flagUserStatus;

        /// <summary>
        /// Returns false as UserStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUserStatus()
        {
            return _flagUserStatus;
        }
        /// <summary>
        /// test code generation for objects Value must be a map of strings to values. It cannot be the &#39;null&#39; value.
        /// </summary>
        /// <value>test code generation for objects Value must be a map of strings to values. It cannot be the &#39;null&#39; value.</value>
        [DataMember(Name = "objectWithNoDeclaredProps", EmitDefaultValue = false)]
        public Option<Object> ObjectWithNoDeclaredProps
        {
            get{ return _ObjectWithNoDeclaredProps;}
            set
            {
                _ObjectWithNoDeclaredProps = value;
                _flagObjectWithNoDeclaredProps = true;
            }
        }
        private Option<Object> _ObjectWithNoDeclaredProps;
        private bool _flagObjectWithNoDeclaredProps;

        /// <summary>
        /// Returns false as ObjectWithNoDeclaredProps should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObjectWithNoDeclaredProps()
        {
            return _flagObjectWithNoDeclaredProps;
        }
        /// <summary>
        /// test code generation for nullable objects. Value must be a map of strings to values or the &#39;null&#39; value.
        /// </summary>
        /// <value>test code generation for nullable objects. Value must be a map of strings to values or the &#39;null&#39; value.</value>
        [DataMember(Name = "objectWithNoDeclaredPropsNullable", EmitDefaultValue = true)]
        public Option<Object> ObjectWithNoDeclaredPropsNullable
        {
            get{ return _ObjectWithNoDeclaredPropsNullable;}
            set
            {
                _ObjectWithNoDeclaredPropsNullable = value;
                _flagObjectWithNoDeclaredPropsNullable = true;
            }
        }
        private Option<Object> _ObjectWithNoDeclaredPropsNullable;
        private bool _flagObjectWithNoDeclaredPropsNullable;

        /// <summary>
        /// Returns false as ObjectWithNoDeclaredPropsNullable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObjectWithNoDeclaredPropsNullable()
        {
            return _flagObjectWithNoDeclaredPropsNullable;
        }
        /// <summary>
        /// test code generation for any type Here the &#39;type&#39; attribute is not specified, which means the value can be anything, including the null value, string, number, boolean, array or object. See https://github.com/OAI/OpenAPI-Specification/issues/1389
        /// </summary>
        /// <value>test code generation for any type Here the &#39;type&#39; attribute is not specified, which means the value can be anything, including the null value, string, number, boolean, array or object. See https://github.com/OAI/OpenAPI-Specification/issues/1389</value>
        [DataMember(Name = "anyTypeProp", EmitDefaultValue = true)]
        public Option<Object> AnyTypeProp
        {
            get{ return _AnyTypeProp;}
            set
            {
                _AnyTypeProp = value;
                _flagAnyTypeProp = true;
            }
        }
        private Option<Object> _AnyTypeProp;
        private bool _flagAnyTypeProp;

        /// <summary>
        /// Returns false as AnyTypeProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAnyTypeProp()
        {
            return _flagAnyTypeProp;
        }
        /// <summary>
        /// test code generation for any type Here the &#39;type&#39; attribute is not specified, which means the value can be anything, including the null value, string, number, boolean, array or object. The &#39;nullable&#39; attribute does not change the allowed values.
        /// </summary>
        /// <value>test code generation for any type Here the &#39;type&#39; attribute is not specified, which means the value can be anything, including the null value, string, number, boolean, array or object. The &#39;nullable&#39; attribute does not change the allowed values.</value>
        [DataMember(Name = "anyTypePropNullable", EmitDefaultValue = true)]
        public Option<Object> AnyTypePropNullable
        {
            get{ return _AnyTypePropNullable;}
            set
            {
                _AnyTypePropNullable = value;
                _flagAnyTypePropNullable = true;
            }
        }
        private Option<Object> _AnyTypePropNullable;
        private bool _flagAnyTypePropNullable;

        /// <summary>
        /// Returns false as AnyTypePropNullable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAnyTypePropNullable()
        {
            return _flagAnyTypePropNullable;
        }
        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  UserStatus: ").Append(UserStatus).Append("\n");
            sb.Append("  ObjectWithNoDeclaredProps: ").Append(ObjectWithNoDeclaredProps).Append("\n");
            sb.Append("  ObjectWithNoDeclaredPropsNullable: ").Append(ObjectWithNoDeclaredPropsNullable).Append("\n");
            sb.Append("  AnyTypeProp: ").Append(AnyTypeProp).Append("\n");
            sb.Append("  AnyTypePropNullable: ").Append(AnyTypePropNullable).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return OpenAPIClientUtils.compareLogic.Compare(this, input as User).AreEqual;
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            return OpenAPIClientUtils.compareLogic.Compare(this, input).AreEqual;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id.IsSet)
                {
                hashCode = (hashCode * 59) + this.Id.Value.GetHashCode();
                }
                if (this.Username.IsSet && this.Username.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Username.Value.GetHashCode();
                }
                if (this.FirstName.IsSet && this.FirstName.Value != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.Value.GetHashCode();
                }
                if (this.LastName.IsSet && this.LastName.Value != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.Value.GetHashCode();
                }
                if (this.Email.IsSet && this.Email.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Email.Value.GetHashCode();
                }
                if (this.Password.IsSet && this.Password.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Password.Value.GetHashCode();
                }
                if (this.Phone.IsSet && this.Phone.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.Value.GetHashCode();
                }
                if (this.UserStatus.IsSet)
                {
                hashCode = (hashCode * 59) + this.UserStatus.Value.GetHashCode();
                }
                if (this.ObjectWithNoDeclaredProps.IsSet && this.ObjectWithNoDeclaredProps.Value != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectWithNoDeclaredProps.Value.GetHashCode();
                }
                if (this.ObjectWithNoDeclaredPropsNullable.IsSet && this.ObjectWithNoDeclaredPropsNullable.Value != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectWithNoDeclaredPropsNullable.Value.GetHashCode();
                }
                if (this.AnyTypeProp.IsSet && this.AnyTypeProp.Value != null)
                {
                    hashCode = (hashCode * 59) + this.AnyTypeProp.Value.GetHashCode();
                }
                if (this.AnyTypePropNullable.IsSet && this.AnyTypePropNullable.Value != null)
                {
                    hashCode = (hashCode * 59) + this.AnyTypePropNullable.Value.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
